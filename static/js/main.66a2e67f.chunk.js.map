{"version":3,"sources":["components/conditionicon/ConditionIcon.js","components/WeatherTile.js","components/WeatherReport.js","helpers/getforecast.js","App.js","serviceWorker.js","index.js"],"names":["getConditionChar","condition","indexOf","ConditionIcon","props","react_default","a","createElement","className","WeatherTile","day","min","current","max","components_conditionicon_ConditionIcon","WeatherReport","weather","forecast","map","components_WeatherTile","Object","assign","key","apiId","getForeCast","city","Promise","resolve","reject","fetch","then","response","json","data","list","collectionOfDays","dayWeather","now","collection","Map","forEach","_ref","dt_txt","main","fullDate","Date","date","toDateString","substring","hour","getHours","weatherOnDate","get","temp_min","temp_max","Math","abs","temp","description","set","forecastArray","value","push","objectSpread","getCollectionOfDays","catch","reason","getCurrentWeather","_ref2","name","App","state","error","searchForeCast","event","_this","setState","preventDefault","_this2","this","_this$state","for","type","placeholder","id","onChange","target","onClick","length","components_WeatherReport","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66a2e67f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ConditionIcon.css';\r\nconst ConditionIcon = (props)=>{\r\n   return(\r\n       <em className='conditionicon'>\r\n           {getConditionChar(props.condition)}\r\n       </em>\r\n   )\r\n}\r\nconst getConditionChar=(condition)=>{\r\n    if(condition.indexOf(\"clouds\")>=0){\r\n        return 'C';\r\n    }\r\n    if(condition.indexOf(\"snow\")>=0){\r\n        return 'o';\r\n    }\r\n    switch(condition){\r\n        case 'light intensity drizzle':\r\n        case 'drizzle':\t\r\n        case 'heavy intensity drizzle':\r\n        case 'light intensity drizzle rain':\r\n        case 'drizzle rain':\r\n        case 'heavy intensity drizzle rain':\r\n        case 'shower rain and drizzle':\r\n        case 'heavy shower rain and drizzle':\r\n        case 'shower drizzle':\r\n            return 'd';\r\n        case 'light rain':\r\n        case 'moderate rain':\r\n        case 'heavy intensity rain':\r\n        case 'very heavy rain':\r\n        case 'extreme rain':\r\n        case 'freezing rain':\r\n        case 'light intensity shower rain':\r\n        case 'shower rain':\r\n        case 'heavy intensity shower rain':\r\n        case 'ragged shower rain':\r\n            return 'Y';\r\n        case 'thunderstorm':\r\n        case 'heavy thunderstorm':\r\n        case 'light thunderstorm':\r\n        case 'ragged thunderstorm':\r\n            return 'Z';\r\n        case 'thunderstorm with light drizzle':\r\n        case 'thunderstorm with drizzle':\r\n        case 'thunderstorm with heavy drizzle':\r\n        case 'thunderstorm with rain':\r\n            return 'a';\r\n        case 'thunderstorm with heavy rain':        \r\n            return 'b';\r\n        case 'few clouds':\r\n            return 'C';\r\n        default:\r\n            return 'A';\r\n    }\r\n}\r\nexport default ConditionIcon;","import React from 'react';\r\nimport ConditionIcon from './conditionicon/ConditionIcon'\r\nconst WeatherTile=(props)=>{\r\n    return(\r\n        <div className={\"weathertile\"}>\r\n            <div>\r\n                {props.day}\r\n            </div>\r\n\r\n            <div>\r\n                <sub>{props.min} </sub> <strong>{props.current}</strong> <sub> {props.max} </sub>\r\n            </div>\r\n           <ConditionIcon condition={props.condition} />\r\n        </div>\r\n    )\r\n}\r\nexport default WeatherTile;","import React from 'react';\r\nimport WeatherTile from './WeatherTile';\r\nimport ConditionIcon from './conditionicon/ConditionIcon';\r\nconst WeatherReport = (props) => {\r\n    return (\r\n        <div className=\"forecastbox\">\r\n            <div className=\"currentWeather\">\r\n                <em > {props.weather.current} </em>\r\n                <ConditionIcon condition={props.weather.condition} />\r\n            </div>\r\n            {props.forecast.map(day => <WeatherTile key={day.day} {...day} />)}\r\n        </div>\r\n    )\r\n}\r\nexport default WeatherReport;","const apiId = '7338b710bcb207349fa7a7e9c846a5e1';\r\n\r\nconst getCollectionOfDays = (dayWeather, now) => {\r\n    const collection = new Map();\r\n\r\n    dayWeather.forEach(({ dt_txt, main, weather }) => {\r\n        const fullDate = new Date(dt_txt);\r\n        const date = fullDate.toDateString().substring(0, 3);\r\n        const hour = fullDate.getHours();\r\n\r\n\r\n        const weatherOnDate = collection.get(date);\r\n        if (weatherOnDate) {\r\n            if (main.temp_min < weatherOnDate.min) {\r\n                weatherOnDate.min = main.temp_min;\r\n            }\r\n            if (main.temp_max > weatherOnDate.max) {\r\n                weatherOnDate.max = main.temp_max\r\n            }\r\n            if (Math.abs(hour - now) <= 2) {\r\n                weatherOnDate.current = main.temp;\r\n                weatherOnDate.condition = weather[0].description;\r\n            }\r\n            collection.set(date, weatherOnDate);\r\n\r\n        } else {\r\n            collection.set(date, {\r\n                current: main.temp,\r\n                min: main.temp_min,\r\n                max: main.temp_max,\r\n                condition: weather[0].description,\r\n            });\r\n        }\r\n\r\n    });\r\n    const forecastArray = [];\r\n    collection.forEach((value, key) => forecastArray.push({ day: key, ...value }));\r\n    return forecastArray;\r\n}\r\nexport const getForeCast = (city) => {\r\n    return new Promise((resolve, reject) => {\r\n        fetch('https://api.openweathermap.org/data/2.5/forecast?q=' + city + '&units=metric&appid=' + apiId)\r\n            .then(response => {\r\n                response.json().then(data => {\r\n                    if (data.list) {\r\n                        const collectionOfDays = getCollectionOfDays(data.list, new Date().getHours());\r\n                        resolve(collectionOfDays);\r\n                    } else {\r\n                        reject(\":( I'm sorry we don't have the forecast for your city\");\r\n                    }\r\n\r\n\r\n                });\r\n            }).catch(reason => reject(\":( Something went wrong , try again\"));\r\n\r\n    });\r\n}\r\nexport const getCurrentWeather = (city) => {\r\n    return new Promise((resolve, reject) => {\r\n        fetch('https://api.openweathermap.org/data/2.5/weather?q=' + city + '&units=metric&appid=' + apiId)\r\n            .then(response => {\r\n                response.json().then(({ main, weather,name }) => {\r\n                    if (main) {\r\n                        resolve({\r\n                            current: main.temp,\r\n                            min: main.temp_min,\r\n                            max: main.temp_max,\r\n                            city:name,\r\n                            condition: weather[0].description,\r\n                        })\r\n                    } else {\r\n                        reject(\":( I'm sorry we don't have the forecast for your city\");\r\n                    }\r\n                })\r\n            }).catch(reason => reject(\":( Something went wrong , try again\"))\r\n    });\r\n\r\n}","import React from 'react';\nimport WeatherReport from './components/WeatherReport'\nimport './App.css';\nimport { getCurrentWeather, getForeCast } from './helpers/getforecast';\n\nclass App extends React.Component {\n  state = {\n    weather: {},\n    forecast: [],\n    city: \"\",\n    error:\"\",\n  }\n  searchForeCast = (event) => {\n\n    const { city } = this.state;\n    getCurrentWeather(city)\n      .then(response => this.setState({ weather: response,error:\"\" }))\n      .catch(reason=>this.setState({error:reason,weather:{},forecast:[]}));\n    getForeCast(city)\n      .then(response => this.setState({ forecast: response,error:\"\" }))\n      .catch(reason=>this.setState({error:reason,forecast:[],weather:{}}));\n    event.preventDefault();\n  }\n  render() {\n    const { forecast, weather, city, error } = this.state;\n    return (\n      <div >\n        <header >\n          <h1>\n            Welcome to my myWeather Service!\n        </h1>\n\n        </header>\n        <section>\n          <form>\n            <div className=\"formcontrol\">\n              <label for=\"city\">City you want to consult </label>\n              <input type=\"text\" value={city} placeholder=\"example: Berlin,GER\" id=\"city\"\n               name=\"city\"  onChange={(event) => this.setState({ city: event.target.value })} />               \n            </div>\n            <button onClick={this.searchForeCast}> Get Forecast </button>\n                                   \n          </form>\n       \n          { forecast.length?\n            <WeatherReport weather={weather} forecast={forecast} />\n            : <div className=\"errormsg\">{error}</div>\n          }\n        \n\n        </section>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}